{"version":3,"sources":["components/feedback-options/feedback-options.js","components/notification/notification.js","components/statistics/statistic.js","components/section/section.js","App.js","index.js"],"names":["FeedbackOptions","options","onLeaveFeedback","map","opt","type","onClick","className","Notification","message","Statistics","good","neutral","bad","total","positivePercentage","Section","title","children","App","state","handleFeedbackCounter","stateName","prevState","setState","countTotalFeedback","Object","values","reduce","acc","value","countPositiveFeedbackPercentage","Math","round","keys","this","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAGe,SAASA,EAAT,GAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBACjD,OACE,mCACGD,EAAQE,KAAI,SAAAC,GAAG,OACd,wBACEC,KAAK,SACLC,QAAS,WACPJ,EAAgBE,IAElBG,UAAU,SALZ,SAQGH,GAFIA,QCVA,SAASI,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QACrC,OACE,mCACE,4BAAIA,MCFK,SAASC,EAAT,GAMX,IALFC,EAKC,EALDA,KACAC,EAIC,EAJDA,QACAC,EAGC,EAHDA,IACAC,EAEC,EAFDA,MACAC,EACC,EADDA,mBAEA,OACE,mCACGD,EACC,qCACE,uCAAUH,KACV,0CAAaC,KACb,sCAASC,KACT,uCAEGC,KAEH,mDAAsBC,QAGxB,mCACE,cAACP,EAAD,CAAcC,QAAS,0BCvBlB,SAASO,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACvC,OACE,qCACE,6BAAKD,IACJC,K,ICDcC,E,4MACnBC,MAAQ,CACNT,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAEPQ,sBAAwB,SAAAC,GACtB,IAAMC,EAAY,EAAKH,MAAME,GAC7B,EAAKE,SAAL,eAAiBF,EAAYC,EAAY,K,EAG3CE,mBAAqB,SAAAL,GAEnB,OADcM,OAAOC,OAAOP,GACfQ,QAAO,SAACC,EAAKC,GAAN,OAAgBD,EAAMC,IAAO,I,EAGnDC,gCAAkC,SAAAT,GAChC,MAAM,GAAN,OAAUU,KAAKC,MACZ,EAAKb,MAAME,GAAa,EAAKG,mBAAmB,EAAKL,OAAU,KADlE,M,uDAQA,OACE,qCAEE,cAACJ,EAAD,CACEC,MAAO,wBACPC,SACE,cAAClB,EAAD,CACEC,QAASyB,OAAOQ,KAAKC,KAAKf,OAC1BlB,gBAAiBiC,KAAKd,0BAI5B,cAACL,EAAD,CACEC,MAAO,aACPC,SACE,cAACR,EAAD,CACEC,KAAMwB,KAAKf,MAAMT,KACjBC,QAASuB,KAAKf,MAAMR,QACpBC,IAAKsB,KAAKf,MAAMP,IAChBC,MAAOqB,KAAKV,mBAAmBU,KAAKf,OACpCL,mBAAoBoB,KAAKJ,gCAAgC,mB,GA7CtCK,aCDjCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.6d05a231.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function FeedbackOptions({ options, onLeaveFeedback }) {\r\n  return (\r\n    <>\r\n      {options.map(opt => (\r\n        <button\r\n          type=\"button\"\r\n          onClick={() => {\r\n            onLeaveFeedback(opt);\r\n          }}\r\n          className=\"button\"\r\n          key={opt}\r\n        >\r\n          {opt}\r\n        </button>\r\n      ))}\r\n    </>\r\n  );\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.array,\r\n  onLeaveFeedback: PropTypes.func,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function Notification({ message }) {\r\n  return (\r\n    <>\r\n      <p>{message}</p>\r\n    </>\r\n  );\r\n}\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Notification from '../notification/notification';\r\n\r\nexport default function Statistics({\r\n  good,\r\n  neutral,\r\n  bad,\r\n  total,\r\n  positivePercentage,\r\n}) {\r\n  return (\r\n    <>\r\n      {total ? (\r\n        <>\r\n          <p>Good: {good}</p>\r\n          <p>Neutral: {neutral}</p>\r\n          <p>Bad: {bad}</p>\r\n          <p>\r\n            Total:\r\n            {total}\r\n          </p>\r\n          <p>Positiv feedback: {positivePercentage}</p>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <Notification message={'No feedback given'} />\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number,\r\n  neutral: PropTypes.number,\r\n  bad: PropTypes.number,\r\n  total: PropTypes.number,\r\n  positivePercentage: PropTypes.string,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function Section({ title, children }) {\r\n  return (\r\n    <>\r\n      <h1>{title}</h1>\r\n      {children}\r\n    </>\r\n  );\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n};\r\n","import React, { Component } from 'react';\n// import Feedback from './components/feedback/feedback';\nimport FeedbackOptions from './components/feedback-options/feedback-options';\nimport Statistics from './components/statistics/statistic';\nimport Section from './components/section/section';\n\nexport default class App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n  handleFeedbackCounter = stateName => {\n    const prevState = this.state[stateName];\n    this.setState({ [stateName]: prevState + 1 });\n  };\n\n  countTotalFeedback = state => {\n    const arrey = Object.values(state);\n    return arrey.reduce((acc, value) => acc + value, 0);\n  };\n\n  countPositiveFeedbackPercentage = stateName => {\n    return `${Math.round(\n      (this.state[stateName] / this.countTotalFeedback(this.state)) * 100,\n    )}%`;\n  };\n\n  render() {\n    // const { good, neutral, bad } = this.state;\n    // console.log(Object.keys(this.state));\n    return (\n      <>\n        {/* <Feedback /> */}\n        <Section\n          title={'Please leave feedback'}\n          children={\n            <FeedbackOptions\n              options={Object.keys(this.state)}\n              onLeaveFeedback={this.handleFeedbackCounter}\n            />\n          }\n        />\n        <Section\n          title={'Statistics'}\n          children={\n            <Statistics\n              good={this.state.good}\n              neutral={this.state.neutral}\n              bad={this.state.bad}\n              total={this.countTotalFeedback(this.state)}\n              positivePercentage={this.countPositiveFeedbackPercentage('good')}\n            />\n          }\n        />\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}